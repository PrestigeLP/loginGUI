import javafx.application.Application;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.fxml.FXMLLoader;
import javafx.scene.*;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.TextField;
import javafx.scene.effect.Reflection;
import javafx.scene.input.KeyCode;
import javafx.scene.input.KeyEvent;
import javafx.scene.input.MouseEvent;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.VBox;
import javafx.scene.layout.VBoxBuilder;
import javafx.scene.paint.Color;
import javafx.scene.text.Font;
import javafx.scene.text.FontWeight;
import javafx.scene.text.Text;
import javafx.stage.Modality;
import javafx.stage.Stage;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.stage.WindowEvent;

import java.awt.*;
import java.awt.event.MouseListener;
import java.security.Key;

public class Main extends Application {

    static String US, PW;

    @Override
    public void start(final Stage primaryStage) throws Exception{
        //Parent root = FXMLLoader.load(getClass().getResource("sample.fxml"));
        primaryStage.setTitle("Login");
        //primaryStage.setScene(new Scene(root, 300, 275))
        final GridPane grid = new GridPane();
        grid.setAlignment(Pos.CENTER);
        grid.setHgap(5);
        grid.setVgap(10);
        grid.setPadding(new Insets(25,25,25,25));
        final Text sceneText = new Text("Login");
        sceneText.setFont(Font.font("Tahoma", FontWeight.NORMAL, 20));
        grid.add(sceneText, 0, 0, 2, 1);

        Image image = new Image("http://goo.gl/YsuGV");
        ImageView view = new ImageView(image);
        view.setEffect(new Reflection());
        view.setFitHeight(80);
        view.setFitWidth(60);
        grid.add(view, 2, 2);

        Label username = new Label("Username");
        grid.add(username, 0, 1);

        final TextField usernameLogin = new TextField();
        grid.add(usernameLogin, 1, 1);

        Label password = new Label("Password");
        grid.add(password, 0, 2);

        final PasswordField passwordLogin = new PasswordField();
        grid.add(passwordLogin, 1, 2);

        Button registerButton = new Button("Register");
        grid.add(registerButton, 2, 3);
        registerButton.setOnAction(new EventHandler<ActionEvent>() {
            @Override
            public void handle(ActionEvent actionEvent) {
                US = usernameLogin.getText().toString();
                PW = passwordLogin.getText().toString();
                System.out.println(US + "    " + PW);
                usernameLogin.clear();
                passwordLogin.clear();
            }
        });

        Button loginButton = new Button("Login");
        grid.add(loginButton, 1, 3);
        loginButton.setOnAction(new EventHandler<ActionEvent>() {
            @Override
            public void handle(ActionEvent actionEvent) {
                if(usernameLogin.getLength() < 0 || passwordLogin.getLength() < 0 ){
                    usernameLogin.clear();
                    passwordLogin.clear();
                    System.out.println("User has not inputted a username and/or password");
                    System.out.println(US + " " + usernameLogin.getText() + ". " + PW + " " + passwordLogin.getText());
                }else if(US.equals(usernameLogin.getText()) && PW.equals(passwordLogin.getText())){
                    primaryStage.close();
                    menu();
                    System.out.println(US + " " + usernameLogin.getText() + ". " + PW + " " + passwordLogin.getText());
                }else{
                    usernameLogin.clear();
                    passwordLogin.clear();
                    System.out.println("User has not inputted the correct username and/pr password");
                    System.out.println(US + " " + usernameLogin.getText() + ". " + PW + " " + passwordLogin.getText());
                }
            }
        });

        //Button registerButton = new Button("Register");
        //grid.add(registerButton, 2, 3);

        final Scene scene = new Scene(grid,300, 275);
        scene.setOnKeyPressed(new EventHandler<KeyEvent>() {
            @Override
            public void handle(KeyEvent keyEvent) {
                if(usernameLogin.getLength() < 0 || passwordLogin.getLength() < 0){
                    usernameLogin.clear();
                    passwordLogin.clear();
                }else if(US.equals(usernameLogin.getText()) && PW.equals(passwordLogin.getText())){
                    primaryStage.close();
                    game();
                }else{
                    usernameLogin.clear();
                    passwordLogin.clear();
                }

            }
        });
        primaryStage.setScene(scene);
        primaryStage.getIcons();
        primaryStage.show();
    }

    private void error(){
        final Stage dialog = new Stage();
        dialog.initModality(Modality.WINDOW_MODAL);
        dialog.setScene(new Scene(VBoxBuilder.create().children(new Text("Error (Press ESC to exit)"), new Button("Ok")).alignment(Pos.CENTER).padding(new Insets(5)).build()));
        dialog.show();
        dialog.addEventHandler(KeyEvent.KEY_PRESSED, new EventHandler<KeyEvent>() {
            @Override
            public void handle(KeyEvent keyEvent) {
                if(keyEvent.getCode()== KeyCode.ESCAPE){
                    dialog.close();
                }
            }
        });
    }
    private void menu(){
        final Stage menuStage = new Stage();
        final Group root = new Group();
        final VBox vbox = new VBox();
        menuStage.setTitle("Menu");

        Button play = new Button("Play");
        play.setOnAction(new EventHandler<ActionEvent>() {
            @Override
            public void handle(ActionEvent actionEvent) {
                menuStage.close();
                game();
            }
        });
        final Label how = new Label("Click the rock that is asked for");
        Button howToPlay = new Button("H.T.P");
        vbox.getChildren().add(howToPlay);
        howToPlay.setOnAction(new EventHandler<ActionEvent>() {
            @Override
            public void handle(ActionEvent actionEvent) {
                vbox.getChildren().clear();
                vbox.getChildren().add(how);
            }
        });
        Button review = new Button("Review");
        Label nameLabel = new Label("Name: ");
        TextField name = new TextField();

        final Scene menuScene = new Scene(root, 250, 250, Color.ANTIQUEWHITE);
        menuStage.setScene(menuScene);
        vbox.getChildren().add(nameLabel);
        vbox.getChildren().add(play);
        vbox.getChildren().add(review);
        vbox.getChildren().add(name);
        root.getChildren().add(vbox);
        menuStage.show();
    }

    private void game(){
        final Stage gameStage = new Stage();
        final Group root = new Group();
        gameStage.setTitle("GaM3?");

        Image IRock = new Image("/sample/IRock.png");
        ImageView IRockV = new ImageView(IRock);
        IRockV.setOnMouseClicked(new EventHandler<MouseEvent>() {
            @Override
            public void handle(MouseEvent mouseEvent) {
                System.out.println("Clicked Igneous Rock!");
                Label I = new Label("Clicked Igneous Rock!");
                if(I.getText().equals("Clicked Igneous Rock!")){
                }else{
                    root.getChildren().add(I);
                    System.out.println("Clicked Igneous Rock!");
                }
            }
        });
        Image SRock = new Image("/sample/SRock.png");
        ImageView SRockV = new ImageView(SRock);
        SRockV.setOnMouseClicked(new EventHandler<MouseEvent>() {
            @Override
            public void handle(MouseEvent mouseEvent) {
                System.out.println("Clicked Sedimentary rock!");
            }
        });

        final Scene gameScene = new Scene(root, 250, 250, Color.BLUE);
        gameStage.setScene(gameScene);
        HBox box = new HBox();
        box.getChildren().add(IRockV);
        box.getChildren().add(SRockV);
        root.getChildren().add(box);
        gameStage.show();
    }

    public static void main(String[] args) {
        launch(args);
    }
}
/*
remove the ENTER_KEY_LISTENER or try and catch
remove on action for login button if the user has not registered yet
improve game() scene
    -randomly place the pictures
    -have different pictures display
    -create "refresh" button that will rearrange the pictures and show different ones
    -create a score bar
    -create a bar that displays the rock/mineral needed to be click
    -improve multi-threading performance
combine both game and menu stages to increase performance and efficiency
try to keep the whole program structured with only two scenes.
*/
